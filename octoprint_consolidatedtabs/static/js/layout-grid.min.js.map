{"version":3,"sources":["../../js/src/Grid.js","../../js/src/LTGrid.js","../../js/src/LTData.js","../../js/src/LTRect.js","../../js/src/LTGridOnly.js","../../js/src/Rect.js","../../js/src/LTSize.js","../../js/src/Store.js"],"names":["Grid","rects","this","prototype","getIntersectingRects","rect","filter","item","intersect","compact","self","slice","sort","a","b","y","forEach","length","height","hights","map","bottom","Math","max","apply","updateNoOverlap","params","update","x","w","h","LTGrid","$","NAME","LTData","getRects","Rect","fn","size","ltGrid","data","DATA_KEY","undefined","grid","jQuery","element","options","$element","_options","_getOptions","$mask","$ghost","EVENT_KEY","Event","UPDATE","START","OVER","END","DROP","LEAVE","Selector","GRID","WIDGET","Default","resize","overlap","lg","gap","maxWidth","Number","MAX_VALUE","cols","aspect","md","sm","xs","option","name","value","currentSize","windowWidth","_windowWidth","modifiedClass","setCss","attr","end","_removeMask","_removeGhost","trigger","$items","children","index","eq","LTRect","toArray","reposition","$widget","_moveGhost","mouseX","mouseY","_getGhost","floor","_itemWidth","_itemHeight","min","append","remove","_moveToGhost","$parent","parent","pos","add","_getMask","width","window","extend","_jQueryInterface","config","a1","a2","a3","each","$this","_config","document","on","event","Store","set","originalEvent","original","get","touches","pageX","offset","left","pageY","top","preventDefault","target","LTGridOnly","$target","CLICK","Css","TOGGLE","originalParams","onlyClasses","removeClass","join","addClass","$item","newRect","loadCss","LTSize","paramNames","right","classes","replace","RegExp","match","parseInt","getRandomNumber","round","Date","getTime","random","getId","id","clear","JSON","stringify","LTWidget","dataTransfer","setData","dataString","getData","parse","getElementById"],"mappings":"mCAKA,IAAIA,GAAO,WAOP,QAASA,GAAKC,GACVC,KAAKD,MAAQA,MA0FjB,MAjFAD,GAAKG,UAAUC,qBAAuB,SAAUC,GAC5C,MAAOH,MAAKD,MAAMK,OAAO,SAAUC,GAC/B,MAAOF,KAASE,GAAQF,EAAKG,UAAUD,MAS/CP,EAAKG,UAAUM,QAAU,WACrB,GACIC,GAAOR,IAcX,OAfgBA,MAAKD,MAAMU,MAAM,GAI5BC,KAAK,SAAUC,EAAGC,GACf,MAAOD,GAAEE,EAAID,EAAEC,IAElBC,QAAQ,SAAUT,GACf,GACIA,EAAKQ,GAAK,QACLR,EAAKQ,GAAK,GAAgD,IAA3CL,EAAKN,qBAAqBG,GAAMU,OAExDV,GAAKQ,GAAK,IAGXb,MAQXF,EAAKG,UAAUe,OAAS,WACpB,GAAIC,GAASjB,KAAKD,MAAMmB,IAAI,SAAUb,GAClC,MAAOA,GAAKc,UAGhB,OAAOF,GAAOF,OAASK,KAAKC,IAAIC,MAAM,KAAML,GAAU,GAU1DnB,EAAKG,UAAUsB,gBAAkB,SAAUpB,EAAMqB,GAE7C,GAAIhB,GAAOR,IASX,OAPAA,MAAKyB,OAAOtB,EAAMqB,GAElBxB,KAAKE,qBAAqBC,GACrBW,QAAQ,SAAUT,GACfG,EAAKe,gBAAgBlB,GAAQqB,EAAGrB,EAAKqB,EAAGb,EAAGV,EAAKgB,aAGjDnB,MAUXF,EAAKG,UAAUwB,OAAS,SAAUtB,EAAMqB,GAOpC,MALArB,GAAKuB,EAAI,KAAQF,GAAUA,EAAOE,EAAIvB,EAAKuB,EAC3CvB,EAAKU,EAAI,KAAQW,GAAUA,EAAOX,EAAIV,EAAKU,EAC3CV,EAAKwB,EAAI,KAAQH,GAAUA,EAAOG,EAAIxB,EAAKwB,EAC3CxB,EAAKyB,EAAI,KAAQJ,GAAUA,EAAOI,EAAIzB,EAAKyB,EAEpC5B,MAGJF,KCrGP+B,GCAS,SAAUC,GAInB,GAAIC,GAAW,SAEXC,GACAD,KAAMA,EAGVC,GAAOC,SAAW,SAAUlC,GACxB,MAAO+B,GAAEZ,IAAInB,EAAO,SAAUI,GAC1B,MAAO,IAAI+B,GAAK/B,EAAKuB,EAAGvB,EAAKU,EAAGV,EAAKwB,EAAGxB,EAAKyB,MAUrDE,EAAEK,GAAGJ,GAAQ,SAAUK,EAAMrC,GAEzB,GAAIsC,GAASrC,KAAK6B,EAAOE,QAAQO,KAAKT,EAAOU,SAE7C,YAAIC,KAAczC,GACdsC,EACKI,KAAKL,EAAM,GAAItC,GAAKkC,EAAOC,SAASlC,KACpC0B,SAEEzB,MAGJqC,EAAOI,KAAKL,GAAMrC,QAK9B2C,QDvCU,SAAUZ,GAsEnB,QAASD,GAAOc,EAASC,GACrB5C,KAAI6C,SAAYf,EAAEa,GAClB3C,KAAK8C,SAAY9C,KAAK+C,YAAYH,OAClC5C,KAAIgD,UAAYR,GAChBxC,KAAIiD,WAAYT,GAhEpB,GAAIT,GAAsB,SACtBQ,EAAsB,UACtBW,EAAsB,IAAMX,EAE5BY,GACAC,OAAU,SACVC,MAAU,YAAcH,EAAY,cAAgBA,EACpDI,KAAU,WAAaJ,EAAY,aAAeA,EAClDK,IAAU,UAAYL,EAAY,eAAiBA,EACnDM,KAAU,OAASN,EAAY,YAAcA,EAC7CO,MAAU,aAAeP,GAGzBQ,GACAC,KAAS,2BACTC,OAAS,gCAGTC,GACAC,QAAQ,EACRC,SAAS,EACTxD,SAAS,EACTiB,QACIwC,IACIC,IAAK,EACLC,SAAUC,OAAOC,UACjBC,KAAM,EACNC,OAAQ,EAAI,GAEhBC,IACIN,IAAK,EACLC,SAAU,KACVG,KAAM,EACNC,OAAQ,EAAI,GAEhBE,IACIP,IAAK,EACLC,SAAU,IACVG,KAAM,EACNC,OAAQ,EAAI,GAEhBG,IACIR,IAAK,EACLC,SAAU,IACVG,KAAM,EACNC,OAAQ,EAAI,IAyXxB,OAjWAzC,GAAOgC,QAAUA,EAEjBhC,EAAOE,KAAOA,EAEdF,EAAOU,SAAWA,EAElBV,EAAOqB,UAAYA,EAEnBrB,EAAO5B,UAAU2C,QAAU,WACvB,MAAO5C,MAAK8C,UAWhBjB,EAAO5B,UAAUyE,OAAS,SAAUC,EAAMC,GACtC5E,KAAK8C,SAAS6B,GAAQC,GAO1B/C,EAAO5B,UAAUmC,KAAO,WACpB,GAAIyC,GACAC,EAAc9E,KAAK+E,cAEvB,KAAK,GAAI3C,KAAQpC,MAAK8C,SAAStB,OACvBsD,EAAc9E,KAAK8C,SAAStB,OAAOY,GAAM8B,WACzCW,EAAczC,EAItB,OAAOyC,IAMXhD,EAAO5B,UAAUM,QAAU,WACvB,GAAI6B,GAAOpC,KAAKoC,OACZK,EAAOzC,KAAKyC,KAAKL,EAErBpC,MAAKyC,KAAKL,EAAMK,EAAKlC,YAMzBsB,EAAO5B,UAAU6D,OAAS,WACtB,GAAI1B,GAAOpC,KAAKoC,OACZjC,EAAO,GAAI+B,GAAK,EAAG,EAAG,EAAGlC,KAAKyC,KAAKL,GAAMpB,UACzCgE,EAAgB7E,EAAK8E,OAAOjF,KAAI6C,SAAUqC,KAAI,SAAW9C,EAE7DpC,MAAI6C,SAAUqC,KAAI,QAAUF,IAMhCnD,EAAO5B,UAAUkF,IAAM,WACnBnF,KAAKoF,cACLpF,KAAKqF,eACLrF,KAAKyB,UAMTI,EAAO5B,UAAUwB,OAAS,WAClBzB,KAAK8C,SAASvC,SACdP,KAAKO,UAGLP,KAAK8C,SAASgB,QACd9D,KAAK8D,SAGT9D,KAAI6C,SAAUyC,QAAQnC,EAAMC,SAUhCvB,EAAO5B,UAAUwC,KAAO,SAAUL,EAAMK,GACpC,GAAI8C,GAASvF,KAAI6C,SAAU2C,SAAQ,cAEnC,YAAIhD,KAAcC,GACdA,EAAK1C,MAAMe,QAAQ,SAAUX,EAAMsF,GAC/BF,EAAOG,GAAGD,GAAOE,EAAO5D,MAAMK,EAAMjC,KAGjCH,MAGJ,GAAIF,GAAIgC,EAAGZ,IAAGqE,EAAQK,UAAW,SAAUvF,GAC9C,MAAOyB,GAAEzB,GAAMsF,EAAO5D,MAAMK,OAWpCP,EAAO5B,UAAU4F,WAAa,SAASC,EAAUtE,GAC7C,GAAIY,GAAOpC,KAAKoC,OACZjC,EAAO2F,EAAQH,EAAO5D,MAAMK,GAC5BK,EAAOzC,KAAKyC,KAAKL,EAEjBpC,MAAK8C,SAASiB,QACdtB,EAAKhB,OAAOtB,EAAMqB,GAElBiB,EAAKlB,gBAAgBpB,EAAMqB,GAG/BxB,KAAKyC,KAAKL,EAAMK,GAChBzC,KAAKyB,UAcTI,EAAO5B,UAAU8F,WAAa,SAASD,EAAUE,EAAQC,GACrD,GAAI7D,GAAOpC,KAAKoC,OACZa,EAASjD,KAAKkG,UAASJ,GACvB3F,EAAO8C,EAAO0C,EAAO5D,MAAMK,GAC3B6B,EAAMjE,KAAK8C,SAAStB,OAAOY,GAAM6B,IACjCI,EAAOrE,KAAK8C,SAAStB,OAAOY,GAAMiC,IAEtClE,GAAKuB,EAAIN,KAAK+E,MAAMH,GAAUhG,KAAKoG,WAAWhE,GAAQ6B,IACtD9D,EAAKU,EAAIO,KAAK+E,MAAMF,GAAUjG,KAAKqG,YAAYjE,GAAQ6B,IAEvD9D,EAAKuB,EAAIN,KAAKkF,IAAIlF,KAAKC,IAAI,EAAGlB,EAAKuB,GAAI2C,EAAOlE,EAAKwB,GAEnDsB,EAAO0C,EAAO5D,MAAMK,EAAMjC,IAS9B0B,EAAO5B,UAAUiG,UAAY,SAASJ,GAMlC,WALItD,KAAcxC,KAAIiD,SAClBjD,KAAIiD,OAAUnB,EAAA,eAAmBgE,EAAQZ,KAAI,SAAY,qBACzDlF,KAAI6C,SAAU0D,OAAOvG,KAAIiD,SAGtBjD,KAAIiD,QAQfpB,EAAO5B,UAAUoF,aAAe,WACxBrF,KAAIiD,SACJjD,KAAIiD,OAAQuD,SACZxG,KAAIiD,WAAUT,KAStBX,EAAO5B,UAAUwG,aAAe,SAASX,GACrC,GAAI1D,GAAOpC,KAAKoC,OACZsE,EAAUZ,EAAQa,SAClB1D,EAASjD,KAAKkG,UAASJ,GACvBc,EAAM3D,EAAO0C,EAAO5D,MAAMK,EAE9BpC,MAAI6C,SAAU0D,OAAMT,GAEpB9F,KAAK6F,WAAUC,GAAYpE,EAAGkF,EAAIlF,EAAGb,EAAG+F,EAAI/F,IAE5C6F,EAAQG,IAAI7G,KAAI6C,UAAWd,GAAI,WAQnCF,EAAO5B,UAAU6G,SAAW,WAMxB,WALItE,KAAcxC,KAAIgD,QAClBhD,KAAIgD,MAASlB,EAAA,mDACb9B,KAAI6C,SAAU0D,OAAOvG,KAAIgD,QAGtBhD,KAAIgD,OAMfnB,EAAO5B,UAAUmF,YAAc,eACvB5C,KAAcxC,KAAIgD,QAClBhD,KAAIgD,MAAOwD,SACXxG,KAAIgD,UAASR,KAUrBX,EAAO5B,UAAUmG,WAAa,SAAUhE,GACpC,GAAIiC,GAAOrE,KAAK8C,SAAStB,OAAOY,GAAMiC,KAClCJ,EAAMjE,KAAK8C,SAAStB,OAAOY,GAAM6B,GAErC,QAAQjE,KAAI6C,SAAUkE,SAAW1C,EAAO,GAAKJ,GAAOI,GASxDxC,EAAO5B,UAAUoG,YAAc,SAAUjE,GACrC,GAAIkC,GAAStE,KAAK8C,SAAStB,OAAOY,GAAMkC,MAExC,OAAOtE,MAAKoG,WAAWhE,GAAQkC,GAQnCzC,EAAO5B,UAAU8E,aAAe,WAC5B,MAAOjD,GAAEkF,QAAQD,SAGrBlF,EAAO5B,UAAU8C,YAAc,SAAUH,GACrC,MAAOd,GAAEmF,QAAO,KAAUpD,EAASjB,IAKvCf,EAAOqF,iBAAmB,SAAUC,EAAQC,EAAIC,EAAIC,GAChD,MAAOtH,MAAKuH,KAAK,WACb,GAAIC,GAAU1F,EAAE9B,MACZsC,EAAUkF,EAAMlF,KAAKC,GACrBkF,EAAU3F,EAAEmF,QACZ,KAEApD,EACA2D,EAAMlF,OACY,gBAAX6E,IAAuBA,EAG7B7E,KACDA,EAAO,GAAIT,GAAO7B,KAAMyH,GACxBD,EAAMlF,KAAKC,EAAUD,IAGH,gBAAX6E,IACP7E,EAAK6E,GAAQC,EAAIC,EAAIC,MAWjCxF,EAAE4F,UACGC,GAAGxE,EAAME,MAAOK,EAASE,OAAQ,SAAUgE,GACxCC,EAAMC,IAAIF,EAAMG,cAAe/H,QAGlC2H,GAAGxE,EAAMG,KAAMI,EAASC,KAAM,SAAUiE,GACrC,GAAII,GAAWJ,EAAMG,cACjBjC,EAAUhE,EAAE+F,EAAMI,IAAID,GAE1B,IAAGlC,EAAS/E,OAAQ,CAChB,GAAI6F,GAAMoB,EAASE,QAAUF,EAASE,QAAQ,GAAKF,EAC/CR,EAAQ1F,EAAE9B,MACVgG,EAASY,EAAIuB,MAAQX,EAAMY,SAASC,KACpCpC,EAASW,EAAI0B,MAAQd,EAAMY,SAASG,IACpC9F,EAAO+E,EAAMzF,KAAQO,KAAKC,EAE9BqF,GAAMY,iBAEN/F,EAAKqE,WACLrE,EAAKsD,WAAUD,EAAUE,EAAQC,MAIxC0B,GAAGxE,EAAMI,IAAKG,EAASC,KAAM,WAC1B7B,EAAE9B,MAAM+B,GAAI,SAGf4F,GAAGxE,EAAMM,MAAOC,EAASC,KAAM,SAAUiE,GACtCA,EAAMY,iBAEkC,SAArC1G,EAAG8F,EAAMa,QAAQnG,KAAI,YACpBR,EAAE9B,MAAM+B,GAAI,SAInB4F,GAAGxE,EAAMK,KAAME,EAASC,KAAM,SAAUiE,GACrC,GAAI9B,GAAUhE,EAAE+F,EAAMI,IAAIL,EAAMG,eAEhC,IAAGjC,EAAS/E,OAAQ,CAChB,GAAIyG,GAAQ1F,EAAE9B,MACVyC,EAAO+E,EAAMzF,KAAQO,KAAKC,EAE9BqF,GAAMY,iBAEN/F,EAAKgE,aAAYX,GACjBrD,EAAK0C,SAUjBrD,EAAEK,GAAGJ,GAAeF,EAAOqF,iBAC3BpF,EAAEK,GAAGJ,GAAMF,OAASA,EAEbA,GAERa,SElbCiD,GCAa,SAAU7D,GAuCvB,QAAS4G,GAAW/F,EAASC,GACzB5C,KAAI6C,SAAYf,EAAEa,GAClB3C,KAAI2I,QAAW7G,EAAEc,EAAQ6F,QAAQ5G,EAAOE,QACxC/B,KAAKqC,OAASrC,KAAI2I,QAASrG,KAAKT,EAAOU,UAhC3C,GAAIR,GAAsB,aACtBQ,EAAsB,eACtBW,EAAsB,IAAMX,EAE5BY,GACAyF,MAAU,QAAU1F,GAGpB2F,GACApE,GAAO,aACPD,GAAO,aACPD,GAAO,aACPP,GAAO,cAGPN,GACAoF,OAAW,+BAqBfJ,GAAW3G,KAAOA,EAElB2G,EAAWnG,SAAWA,EAEtBmG,EAAWxF,UAAYA,EAOvBwF,EAAWzI,UAAU8I,eAAiB,WAKlC,WAJIvG,KAAcxC,KAAKqC,OAAOO,UAAUmG,iBACpC/I,KAAKqC,OAAOO,UAAUmG,eAAiB/I,KAAKqC,OAAOO,UAAUpB,QAG1DxB,KAAKqC,OAAOO,UAAUmG,gBAOjCL,EAAWzI,UAAU6H,IAAM,SAAU1F,GACjC,GAAI4F,GAAWhI,KAAK+I,iBAChBC,EAAclH,EAAEZ,IAChB2H,EACA,SAAUlE,GACN,MAAOA,IAMf,IAFA3E,KAAI2I,QAASM,YAAYD,EAAYE,KAAI,MAErC9G,EAAM,CACN,GAAIZ,KACJA,GAAOY,GAAQ4F,EAAS5F,GACxBZ,EAAOY,GAAM8B,SAAWC,OAAOC,UAE/BpE,KAAI2I,QAASQ,SAASN,EAAIzG,IAC1BpC,KAAKqC,OAAOqC,OAAM,SAAWlD,OAE7BxB,MAAKqC,OAAOqC,OAAM,SAAWsD,IAMrCU,EAAWxB,iBAAmB,SAAUC,EAAQC,GAC5C,MAAOpH,MAAKuH,KAAK,WACb,GAAIC,GAAU1F,EAAE9B,MACZsC,EAAUkF,EAAMlF,KAAKC,GACrBkF,EAAU3F,EAAEmF,QACZ,KAEAO,EAAMlF,OACY,gBAAX6E,IAAuBA,EAG7B7E,KACDA,EAAO,GAAIoG,GAAW1I,KAAMyH,GAC5BD,EAAMlF,KAAKC,EAAUD,IAGH,gBAAX6E,IACP7E,EAAK6E,GAAQC,MAWzBtF,EAAE4F,UACGC,GAAGxE,EAAMyF,MAAOlF,EAASoF,OAAQ,SAAUlB,GACxC,GAAIwB,GAAQtH,EAAE8F,EAAMa,OAEpBW,GAAMV,EAAW3G,MAAI,MAASqH,EAAM9G,KAAI,WAShDR,EAAEK,GAAGJ,GAAmB2G,EAAWxB,iBACnCpF,EAAEK,GAAGJ,GAAM2G,WAAaA,GAIzBhG,QD7IU,SAAUZ,GAInB,GAAIC,GAAW,SACXQ,EAAW,UAEXoD,GACA5D,KAAMA,EACNQ,SAAUA,EA2Bd,OAdAT,GAAEK,GAAGJ,GAAQ,SAAUK,EAAMiH,GACzB,WAAI7G,KAAc6G,OACV7G,KAAcxC,KAAKsC,KAAKC,EAAWH,IACnCpC,KAAKsC,KAAKC,EAAWH,GAAM,GAAKF,IAAQoH,QAAQtJ,KAAKkF,KAAI,SAAW9C,IAEjEpC,KAAKsC,KAAKC,EAAWH,KAGhCpC,KAAKsC,KAAKC,EAAWH,EAAMiH,GAC3BrJ,KAAKkF,KAAI,QAAUmE,EAAQpE,OAAOjF,KAAKkF,KAAI,SAAW9C,IAE/CpC,OAGJ2F,GAERjD,SEnCCR,GCHS,SAAUJ,GAInB,GAAIC,GAAO,SAEPwH,GACAxH,KAAMA,EAMVD,GAAEK,GAAGJ,GAAQ,WACT,MAAO/B,MAAK6B,EAAOE,QAAQO,KAAKT,EAAOU,UAAUH,SAKtDM,QDhBQ,WAYP,QAASR,GAAKR,EAAGb,EAAGc,EAAGC,GACnB5B,KAAK0B,EAAIA,GAAK,EACd1B,KAAKa,EAAIA,GAAK,EACdb,KAAK2B,EAAIA,GAAK,EACd3B,KAAK4B,EAAIA,GAAK,EAZlB,GAAI4H,IAAa,IAAM,IAAK,IAAK,IA8EjC,OA5DAtH,GAAKjC,UAAUkB,OAAS,WACpB,MAAOnB,MAAKa,EAAIb,KAAK4B,GAMzBM,EAAKjC,UAAUwJ,MAAQ,WACnB,MAAOzJ,MAAK0B,EAAI1B,KAAK2B,GASzBO,EAAKjC,UAAUK,UAAY,SAAUH,GACjC,MAAOH,MAAK0B,EAAIvB,EAAKsJ,SAAWzJ,KAAKyJ,QAAUtJ,EAAKuB,GAAK1B,KAAKa,EAAIV,EAAKgB,UAAYnB,KAAKmB,SAAWhB,EAAKU,GAY5GqB,EAAKjC,UAAUgF,OAAS,SAAUyE,EAAStH,GACvC,GAAI5B,GAAOR,IAMX,OAJAwJ,GAAW1I,QAAQ,SAAU6D,GACzB+E,EAAUA,EAAQC,QAAQ,GAAIC,QAAM,MAASxH,EAAO,IAAMuC,EAAO,WAAY,MAAQvC,EAAO,IAAMuC,EAAO,IAAMnE,EAAKmE,MAGjH+E,GASXxH,EAAKjC,UAAUqJ,QAAU,SAAUI,EAAStH,GACxC,GAAI5B,GAAOR,IAUX,OARAwJ,GAAW1I,QAAQ,SAAU6D,GACzB,GAAIkF,GAAQH,EAAQG,MAAM,GAAID,QAAM,MAASxH,EAAO,IAAMuC,EAAO,WAE7DkF,KACArJ,EAAKmE,GAAQmF,SAASD,EAAM,GAAI,OAIjC7J,MAGJkC,MEjFP2F,EAAQ,WAIR,GAAIA,KAiEJ,OA1DAA,GAAMkC,gBAAkB,WACpB,MAAO3I,MAAK4I,OAAM,GAAIC,OAAOC,UAA6B,IAAhB9I,KAAK+I,WAUnDtC,EAAMuC,MAAQ,SAAU/J,GAKpB,MAJKA,GAAKgK,KACNhK,EAAKgK,GAAK,MAAQrK,KAAK+J,mBAGpB1J,EAAKgK,IAMhBxC,EAAMyC,MAAQ,WACVtK,KAAKK,KAAO,MAShBwH,EAAMC,IAAM,SAAUF,EAAOvH,GAEzBL,KAAKK,KAAOkK,KAAKC,WACbC,SAAUzK,KAAKoK,MAAM/J,KAGrBuH,EAAM8C,cACN9C,EAAM8C,aAAaC,QAAO,OAAS3K,KAAKK,OAUhDwH,EAAMI,IAAM,SAAUL,GAClB,GAAIgD,GAAchD,EAAM8C,cAAgB9C,EAAM8C,aAAaG,QAAO,SAAa7K,KAAKK,IAEpF,IAAIuK,EAAY,CACZ,GAAItI,GAAOiI,KAAKO,MAAMF,EACtB,OAAOlD,UAASqD,eAAezI,EAAKmI,YAIrC5C","file":"layout-grid.min.js","sourcesContent":["/* exported Grid */\n\n/**\n * A collection of rect objects\n */\nvar Grid = (function () {\n\n    \n\n    /**\n     * @param  {Array}  rects array of Rect objects\n     */\n    function Grid(rects) {\n        this.rects = rects || []\n    }\n\n    /**\n     * Return all the rects that intersect with a given rect\n     *\n     * @param  {Rect} rect\n     * @return {Array}\n     */\n    Grid.prototype.getIntersectingRects = function (rect) {\n        return this.rects.filter(function (item) {\n            return rect !== item && rect.intersect(item)\n        })\n    }\n\n    /**\n     * Reduce all the vertical whitespace between rects\n     *\n     * @return {Grid} self\n     */\n    Grid.prototype.compact = function () {\n        var rectsCopy = this.rects.slice(0)\n        var self = this\n\n        rectsCopy\n            .sort(function (a, b) {\n                return a.y - b.y\n            })\n            .forEach(function (item) {\n                do {\n                    item.y -= 1\n                } while (item.y >= 0 && self.getIntersectingRects(item).length === 0)\n\n                item.y += 1\n            })\n\n        return this\n    }\n\n    /**\n     * The maximum height of the rects in the grid\n     *\n     * @return {Number}\n     */\n    Grid.prototype.height = function () {\n        var hights = this.rects.map(function (item) {\n            return item.bottom()\n        })\n\n        return hights.length ? Math.max.apply(null, hights) : 0\n    }\n\n    /**\n     * Call update() and if there is overlap move rects downards\n     *\n     * @param  {Rect}   rect   passed to update()\n     * @param  {Object} params passed to update()\n     * @return {Grid}          self\n     */\n    Grid.prototype.updateNoOverlap = function (rect, params) {\n\n        var self = this\n\n        this.update(rect, params)\n\n        this.getIntersectingRects(rect)\n            .forEach(function (item) {\n                self.updateNoOverlap(item, { x: item.x, y: rect.bottom() })\n            })\n\n        return this\n    }\n\n    /**\n     * Move a rect inside the grid, or update its size\n     *\n     * @param  {Rect}   rect\n     * @param  {Object} params An object with optional keys x, y, w, h to modify the rect\n     * @return {Grid}          self\n     */\n    Grid.prototype.update = function (rect, params) {\n\n        rect.x = ('x' in params) ? params.x : rect.x\n        rect.y = ('y' in params) ? params.y : rect.y\n        rect.w = ('w' in params) ? params.w : rect.w\n        rect.h = ('h' in params) ? params.h : rect.h\n\n        return this\n    }\n\n    return Grid\n})()\n","/* exported LTGrid */\n\nvar LTGrid = (function ($) {\n\n    \n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    var NAME                = 'ltGrid'\n    var DATA_KEY            = 'lt.grid'\n    var EVENT_KEY           = '.' + DATA_KEY\n\n    var Event = {\n        UPDATE  : 'update',\n        START   : 'dragstart' + EVENT_KEY + ' touchstart' + EVENT_KEY,\n        OVER    : 'dragover' + EVENT_KEY + ' touchmove' + EVENT_KEY,\n        END     : 'dragend' + EVENT_KEY + ' touchcancel' + EVENT_KEY,\n        DROP    : 'drop' + EVENT_KEY + ' touchend' + EVENT_KEY,\n        LEAVE   : 'dragleave.' + EVENT_KEY\n    }\n\n    var Selector = {\n        GRID   : '[data-arrange=\"lt-grid\"]',\n        WIDGET : '[data-arrange=\"lt-grid\"] .lt'\n    }\n\n    var Default = {\n        resize: true,\n        overlap: false,\n        compact: true,\n        params: {\n            lg: {\n                gap: 1,\n                maxWidth: Number.MAX_VALUE,\n                cols: 4,\n                aspect: 2 / 3\n            },\n            md: {\n                gap: 2,\n                maxWidth: 1200,\n                cols: 3,\n                aspect: 2 / 3\n            },\n            sm: {\n                gap: 3,\n                maxWidth: 992,\n                cols: 2,\n                aspect: 2 / 3\n            },\n            xs: {\n                gap: 4,\n                maxWidth: 768,\n                cols: 1,\n                aspect: 2 / 3\n            }\n        }\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n    /**\n     * @param  {jQuery} element\n     * @param  {Object} options\n     */\n    function LTGrid(element, options) {\n        this.$element = $(element)\n        this._options  = this._getOptions(options || {})\n        this.$mask    = undefined\n        this.$ghost   = undefined\n    }\n\n    // getters\n\n    LTGrid.Default = Default\n\n    LTGrid.NAME = NAME\n\n    LTGrid.DATA_KEY = DATA_KEY\n\n    LTGrid.EVENT_KEY = EVENT_KEY\n\n    LTGrid.prototype.options = function () {\n        return this._options\n    }\n\n    // public\n\n    /**\n     * Update an option directly\n     *\n     * @param  {String} name\n     * @param  {mixed} value\n     */\n    LTGrid.prototype.option = function (name, value) {\n        this._options[name] = value\n    }\n\n    /**\n     * Get the current screen size\n     * @return {String} xs, sm, md or lg\n     */\n    LTGrid.prototype.size = function () {\n        var currentSize\n        var windowWidth = this._windowWidth()\n\n        for (var size in this._options.params) {\n            if (windowWidth < this._options.params[size].maxWidth) {\n                currentSize = size\n            }\n        }\n\n        return currentSize\n    }\n\n    /**\n     * Compact the grid for current size\n     */\n    LTGrid.prototype.compact = function () {\n        var size = this.size()\n        var grid = this.grid(size)\n\n        this.grid(size, grid.compact())\n    }\n\n    /**\n     * Resize container to match items\n     */\n    LTGrid.prototype.resize = function () {\n        var size = this.size()\n        var rect = new Rect(0, 0, 0, this.grid(size).height())\n        var modifiedClass = rect.setCss(this.$element.attr('class'), size)\n\n        this.$element.attr('class', modifiedClass)\n    }\n\n    /**\n     * Clear artefacts like mask and ghost and update\n     */\n    LTGrid.prototype.end = function () {\n        this._removeMask()\n        this._removeGhost()\n        this.update()\n    }\n\n    /**\n     * Call resize and compact if allowed\n     */\n    LTGrid.prototype.update = function () {\n        if (this._options.compact) {\n            this.compact()\n        }\n\n        if (this._options.resize) {\n            this.resize()\n        }\n\n        this.$element.trigger(Event.UPDATE)\n    }\n\n    /**\n     * Setter / getter of a Grid object for this Layout Grid\n     *\n     * @param  {String} size xs, sm, md or lg\n     * @param  {Grid}   grid\n     * @return {Grid}\n     */\n    LTGrid.prototype.grid = function (size, grid) {\n        var $items = this.$element.children('[draggable]')\n\n        if (undefined !== grid) {\n            grid.rects.forEach(function (rect, index) {\n                $items.eq(index)[LTRect.NAME](size, rect)\n            })\n\n            return this\n        }\n\n        return new Grid($.map($items.toArray(), function (item) {\n            return $(item)[LTRect.NAME](size)\n        }))\n    }\n\n    /**\n     * Move a widget within the grid, repositioning other elements\n     * so there is no overlapping\n     *\n     * @param  {jQuery} $widget\n     * @param  {Object} params An object with optional keys x, y, w, h to modify the rect\n     */\n    LTGrid.prototype.reposition = function ($widget, params) {\n        var size = this.size()\n        var rect = $widget[LTRect.NAME](size)\n        var grid = this.grid(size)\n\n        if (this._options.overlap) {\n            grid.update(rect, params)\n        } else {\n            grid.updateNoOverlap(rect, params)\n        }\n\n        this.grid(size, grid)\n        this.update()\n    }\n\n    // private\n    // ------------------------------------------------------------------------\n\n    /**\n     * Move the ghost element of a widget inside the grid.\n     * Pass a mouse x and y coords, relative to the grid\n     *\n     * @param  {jQuery} $widget\n     * @param  {Number} mouseX\n     * @param  {Number} mouseY\n     */\n    LTGrid.prototype._moveGhost = function ($widget, mouseX, mouseY) {\n        var size = this.size()\n        var $ghost = this._getGhost($widget)\n        var rect = $ghost[LTRect.NAME](size)\n        var gap = this._options.params[size].gap\n        var cols = this._options.params[size].cols\n\n        rect.x = Math.floor(mouseX / (this._itemWidth(size) + gap))\n        rect.y = Math.floor(mouseY / (this._itemHeight(size) + gap))\n\n        rect.x = Math.min(Math.max(0, rect.x), cols - rect.w)\n\n        $ghost[LTRect.NAME](size, rect)\n    }\n\n    /**\n     * Return a ghost item for a widget, cache ghost\n     *\n     * @param  {jQuery} $widget\n     * @return {jQuery}\n     */\n    LTGrid.prototype._getGhost = function ($widget) {\n        if (undefined === this.$ghost) {\n            this.$ghost = $('<div class=\"' + $widget.attr('class') + ' lt-ghost\"></div>')\n            this.$element.append(this.$ghost)\n        }\n\n        return this.$ghost\n    }\n\n    /**\n     * Remove the ghost element for this grid\n     *\n     * @param  {jQuery} $widget\n     */\n    LTGrid.prototype._removeGhost = function () {\n        if (this.$ghost) {\n            this.$ghost.remove()\n            this.$ghost = undefined\n        }\n    }\n\n    /**\n     * Move the widget to its corresponding ghost position\n     *\n     * @param  {jQuery} $widget\n     */\n    LTGrid.prototype._moveToGhost = function ($widget) {\n        var size = this.size()\n        var $parent = $widget.parent()\n        var $ghost = this._getGhost($widget)\n        var pos = $ghost[LTRect.NAME](size)\n\n        this.$element.append($widget)\n\n        this.reposition($widget, { x: pos.x, y: pos.y })\n\n        $parent.add(this.$element)[NAME]('update')\n    }\n\n    /**\n     * Get the mask of the grid. Create one if there is none.\n     *\n     * @return {jQuery}\n     */\n    LTGrid.prototype._getMask = function () {\n        if (undefined === this.$mask) {\n            this.$mask = $('<div class=\"lt-mask\" data-lt-grid=\"mask\"></div>')\n            this.$element.append(this.$mask)\n        }\n\n        return this.$mask\n    }\n\n    /**\n     * Remove the mask\n     */\n    LTGrid.prototype._removeMask = function () {\n        if (undefined !== this.$mask) {\n            this.$mask.remove()\n            this.$mask = undefined\n        }\n    }\n\n    /**\n     * The width of a single grid count, in pixels\n     *\n     * @param  {String} size xs, sm, md or lg\n     * @return {Number}\n     */\n    LTGrid.prototype._itemWidth = function (size) {\n        var cols = this._options.params[size].cols\n        var gap = this._options.params[size].gap\n\n        return (this.$element.width() - (cols - 1) * gap) / cols\n    }\n\n    /**\n     * The height of a single grid count, in pixels\n     *\n     * @param  {String} size xs, sm, md or lg\n     * @return {Number}\n     */\n    LTGrid.prototype._itemHeight = function (size) {\n        var aspect = this._options.params[size].aspect\n\n        return this._itemWidth(size) * aspect\n    }\n\n    /**\n     * Return the current window width\n     *\n     * @return {Number}\n     */\n    LTGrid.prototype._windowWidth = function () {\n        return $(window).width()\n    }\n\n    LTGrid.prototype._getOptions = function (options) {\n        return $.extend(true, {}, Default, options)\n    }\n\n    // static\n\n    LTGrid._jQueryInterface = function (config, a1, a2, a3) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data(DATA_KEY)\n            var _config = $.extend(\n                true,\n                {},\n                Default,\n                $this.data(),\n                typeof config === 'object' && config\n            )\n\n            if (!data) {\n                data = new LTGrid(this, _config)\n                $this.data(DATA_KEY, data)\n            }\n\n            if (typeof config === 'string') {\n                data[config](a1, a2, a3)\n            }\n        })\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    $(document)\n        .on(Event.START, Selector.WIDGET, function (event) {\n            Store.set(event.originalEvent, this)\n        })\n\n        .on(Event.OVER, Selector.GRID, function (event) {\n            var original = event.originalEvent\n            var $widget = $(Store.get(original))\n\n            if ($widget.length) {\n                var pos = original.touches ? original.touches[0] : original\n                var $this = $(this)\n                var mouseX = pos.pageX - $this.offset().left\n                var mouseY = pos.pageY - $this.offset().top\n                var grid = $this[NAME]().data(DATA_KEY)\n\n                event.preventDefault()\n\n                grid._getMask()\n                grid._moveGhost($widget, mouseX, mouseY)\n            }\n        })\n\n        .on(Event.END, Selector.GRID, function () {\n            $(this)[NAME]('end')\n        })\n\n        .on(Event.LEAVE, Selector.GRID, function (event) {\n            event.preventDefault()\n\n            if ($(event.target).data('lt-grid') === 'mask') {\n                $(this)[NAME]('end')\n            }\n        })\n\n        .on(Event.DROP, Selector.GRID, function (event) {\n            var $widget = $(Store.get(event.originalEvent))\n\n            if ($widget.length) {\n                var $this = $(this)\n                var grid = $this[NAME]().data(DATA_KEY)\n\n                event.preventDefault()\n\n                grid._moveToGhost($widget)\n                grid.end()\n            }\n        })\n\n    /**\n    * ------------------------------------------------------------------------\n    * jQuery\n    * ------------------------------------------------------------------------\n    */\n\n    $.fn[NAME]        = LTGrid._jQueryInterface\n    $.fn[NAME].LTGrid = LTGrid\n\n    return LTGrid\n\n})(jQuery)\n","/* exported LTData */\n\nvar LTData = (function ($) {\n\n    \n\n    var NAME     = 'ltData'\n\n    var LTData = {\n        NAME: NAME\n    }\n\n    LTData.getRects = function (rects) {\n        return $.map(rects, function (rect) {\n            return new Rect(rect.x, rect.y, rect.w, rect.h)\n        })\n    }\n\n    /**\n     * Getter / setter for rects data\n     *\n     * @param  {string} size    xs, sm, md or lg\n     * @param  {Array} rects    Array of Rect objects\n     */\n    $.fn[NAME] = function (size, rects) {\n\n        var ltGrid = this[LTGrid.NAME]().data(LTGrid.DATA_KEY)\n\n        if (undefined !== rects) {\n            ltGrid\n                .grid(size, new Grid(LTData.getRects(rects)))\n                .update()\n\n            return this\n        }\n\n        return ltGrid.grid(size).rects\n    }\n\n    return LTData\n\n})(jQuery)\n","/* exported LTRect */\n\nvar LTRect = (function ($) {\n\n    \n\n    var NAME     = 'ltRect'\n    var DATA_KEY = 'lt.rect'\n\n    var LTRect = {\n        NAME: NAME,\n        DATA_KEY: DATA_KEY\n    }\n\n    /**\n     * Getter / setter for div element's rect.\n     * Uses its css classes to laod the initial rect for a given size,\n     * then caches in data.\n     * Each screen size has its own rect\n     *\n     * @param  {string} size    xs, sm, md or lg\n     * @param  {Rect}   newRect a Rect object to set\n     * @return {jQuery}\n     */\n    $.fn[NAME] = function (size, newRect) {\n        if (undefined === newRect) {\n            if (undefined === this.data(DATA_KEY + size)) {\n                this.data(DATA_KEY + size, (new Rect()).loadCss(this.attr('class'), size))\n            }\n            return this.data(DATA_KEY + size)\n        }\n\n        this.data(DATA_KEY + size, newRect)\n        this.attr('class', newRect.setCss(this.attr('class'), size))\n\n        return this\n    }\n\n    return LTRect\n\n})(jQuery)\n","/* exported LTGridOnly */\n\nvar LTGridOnly = (function ($) {\n\n    \n\n    /**\n     * ------------------------------------------------------------------------\n     * Constants\n     * ------------------------------------------------------------------------\n     */\n\n    var NAME                = 'ltGridOnly'\n    var DATA_KEY            = 'lt.grid-only'\n    var EVENT_KEY           = '.' + DATA_KEY\n\n    var Event = {\n        CLICK   : 'click' + EVENT_KEY\n    }\n\n    var Css = {\n        xs   : 'lt-only-xs',\n        sm   : 'lt-only-sm',\n        md   : 'lt-only-md',\n        lg   : 'lt-only-lg'\n    }\n\n    var Selector = {\n        TOGGLE   : '[data-toggle=\"lt-grid-only\"]'\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Class Definition\n     * ------------------------------------------------------------------------\n     */\n\n    /**\n     * @param  {jQuery} element\n     * @param  {Object} options\n     */\n    function LTGridOnly(element, options) {\n        this.$element = $(element)\n        this.$target = $(options.target)[LTGrid.NAME]()\n        this.ltGrid = this.$target.data(LTGrid.DATA_KEY)\n    }\n\n    // getters\n\n    LTGridOnly.NAME = NAME\n\n    LTGridOnly.DATA_KEY = DATA_KEY\n\n    LTGridOnly.EVENT_KEY = EVENT_KEY\n\n    // public\n\n    /**\n     * Save original params for later use\n     */\n    LTGridOnly.prototype.originalParams = function () {\n        if (undefined === this.ltGrid.options().originalParams) {\n            this.ltGrid.options().originalParams = this.ltGrid.options().params\n        }\n\n        return this.ltGrid.options().originalParams\n    }\n\n    /**\n     * Compact the grid for current size\n     * @param  {String} size\n     */\n    LTGridOnly.prototype.set = function (size) {\n        var original = this.originalParams()\n        var onlyClasses = $.map(\n            Css,\n            function (name) {\n                return name\n            }\n        )\n\n        this.$target.removeClass(onlyClasses.join(' '))\n\n        if (size) {\n            var params = {}\n            params[size] = original[size]\n            params[size].maxWidth = Number.MAX_VALUE\n\n            this.$target.addClass(Css[size])\n            this.ltGrid.option('params', params)\n        } else {\n            this.ltGrid.option('params', original)\n        }\n    }\n\n    // static\n\n    LTGridOnly._jQueryInterface = function (config, a1) {\n        return this.each(function () {\n            var $this   = $(this)\n            var data    = $this.data(DATA_KEY)\n            var _config = $.extend(\n                true,\n                {},\n                $this.data(),\n                typeof config === 'object' && config\n            )\n\n            if (!data) {\n                data = new LTGridOnly(this, _config)\n                $this.data(DATA_KEY, data)\n            }\n\n            if (typeof config === 'string') {\n                data[config](a1)\n            }\n        })\n    }\n\n    /**\n     * ------------------------------------------------------------------------\n     * Data Api implementation\n     * ------------------------------------------------------------------------\n     */\n\n    $(document)\n        .on(Event.CLICK, Selector.TOGGLE, function (event) {\n            var $item = $(event.target)\n\n            $item[LTGridOnly.NAME]('set', $item.data('only'))\n        })\n\n    /**\n    * ------------------------------------------------------------------------\n    * jQuery\n    * ------------------------------------------------------------------------\n    */\n\n    $.fn[NAME]            = LTGridOnly._jQueryInterface\n    $.fn[NAME].LTGridOnly = LTGridOnly\n\n    return LTGridOnly\n\n})(jQuery)\n","/* exported Rect */\n\n/**\n * Object that represents a rectangle with many supporting methods\n */\nvar Rect = (function () {\n\n    \n\n    var paramNames = ['x', 'y', 'w', 'h']\n\n    /**\n     * @param  {Number} x default 0\n     * @param  {Number} y default 0\n     * @param  {Number} w width, default 1\n     * @param  {Number} h height, default 1\n     */\n    function Rect(x, y, w, h) {\n        this.x = x || 0\n        this.y = y || 0\n        this.w = w || 1\n        this.h = h || 1\n    }\n\n    /**\n     * @return {Number}\n     */\n    Rect.prototype.bottom = function () {\n        return this.y + this.h\n    }\n\n    /**\n     * @return {Number}\n     */\n    Rect.prototype.right = function () {\n        return this.x + this.w\n    }\n\n    /**\n     * Check if this rect is intersecting with another rect\n     *\n     * @param  {Rect} rect\n     * @return {Boolean}\n     */\n    Rect.prototype.intersect = function (rect) {\n        return this.x < rect.right() && this.right() > rect.x && this.y < rect.bottom() && this.bottom() > rect.y\n    }\n\n    /**\n     * Modify a \"css classes\" string\n     * with the pos and size of this rect,\n     * for a specific screen size\n     *\n     * @param {String} classes html classes\n     * @param {String} size    xs, sm, md or lg\n     * @return {String}\n     */\n    Rect.prototype.setCss = function (classes, size) {\n        var self = this\n\n        paramNames.forEach(function (name) {\n            classes = classes.replace(new RegExp('lt-' + size + '-' + name + '-(\\\\d+)'), 'lt-' + size + '-' + name + '-' + self[name])\n        })\n\n        return classes\n    }\n\n    /**\n     * Load data from \"css classes\", for a specific screen size\n     *\n     * @param {String} classes html classes\n     * @param {String} size    xs, sm, md or lg\n     */\n    Rect.prototype.loadCss = function (classes, size) {\n        var self = this\n\n        paramNames.forEach(function (name) {\n            var match = classes.match(new RegExp('lt-' + size + '-' + name + '-(\\\\d+)'))\n\n            if (match) {\n                self[name] = parseInt(match[1], 10)\n            }\n        })\n\n        return this\n    }\n\n    return Rect\n})()\n","/* exported LTSize */\n\nvar LTSize = (function ($) {\n\n    \n\n    var NAME = 'ltSize'\n\n    var LTSize = {\n        NAME: NAME\n    }\n\n    /**\n     * Get the current size of the grid\n     */\n    $.fn[NAME] = function () {\n        return this[LTGrid.NAME]().data(LTGrid.DATA_KEY).size()\n    }\n\n    return LTSize\n\n})(jQuery)\n","/* exported Store */\n\n/**\n * A class to store / retrieve element inside of dataTransfer object of an event\n * Fall back to a static variable if dataTransfer is not available\n */\nvar Store = (function () {\n\n    \n\n    var Store = {}\n\n    /**\n     * Genrate a time based random number\n     *\n     * @return {Number}\n     */\n    Store.getRandomNumber = function () {\n        return Math.round(new Date().getTime() + (Math.random() * 100))\n    }\n\n    /**\n     * Make sure the item has an id to quickly find it\n     * Do not override existing ids\n     *\n     * @param  {Element} item\n     * @return {String}\n     */\n    Store.getId = function (item) {\n        if (!item.id) {\n            item.id = 'lt-' + this.getRandomNumber()\n        }\n\n        return item.id\n    }\n\n    /**\n     * Clear internal storage variable\n     */\n    Store.clear = function () {\n        this.item = null\n    }\n\n    /**\n     * Save the element\n     *\n     * @param {Event}    event\n     * @param {Element}  item\n     */\n    Store.set = function (event, item) {\n\n        this.item = JSON.stringify({\n            LTWidget: this.getId(item)\n        })\n\n        if (event.dataTransfer) {\n            event.dataTransfer.setData('text', this.item)\n        }\n    }\n\n    /**\n     * Retrieve stored element\n     *\n     * @param  {Event}   event\n     * @return {Element}\n     */\n    Store.get = function (event) {\n        var dataString = (event.dataTransfer && event.dataTransfer.getData('text')) || this.item\n\n        if (dataString) {\n            var data = JSON.parse(dataString)\n            return document.getElementById(data.LTWidget)\n        }\n    }\n\n    return Store\n})()\n"]}